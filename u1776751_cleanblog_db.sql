-- phpMyAdmin SQL Dump
-- version 5.0.2
-- https://www.phpmyadmin.net/
--
-- Хост: localhost
-- Время создания: Сен 05 2022 г., 21:16
-- Версия сервера: 5.7.27-30
-- Версия PHP: 7.1.33

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- База данных: `u1776751_cleanblog_db`
--

-- --------------------------------------------------------

--
-- Структура таблицы `articles`
--

CREATE TABLE `articles` (
  `id` int(11) NOT NULL,
  `name` varchar(255) NOT NULL,
  `date` date NOT NULL,
  `logo` varchar(255) DEFAULT NULL,
  `text` text NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `articles`
--

INSERT INTO `articles` (`id`, `name`, `date`, `logo`, `text`) VALUES
(2, 'Кардио дома без тренажеров: комплекс упражнений, правила выполнения', '2022-09-04', '1662320495.jpg', 'В последнее десятилетие занятия спортом приобрели широчайшую популярность среди молодежи. Массовое открытие спортклубов и фитнес-залов дает возможность людям разного возраста, из разных сфер деятельности и разных социальных слоев прийти сюда и начать свой нелегкий путь к изменениям в своей внешности. Недовольные своими пропорциями девушки, желающие набрать мышечную массу мужчины, а также те, кто хочет сбросить лишний вес, являются сегодня завсегдатаями подобного рода заведений. \r\nОднако в силу каких-либо трудностей – финансовых, временных, ограничительных – не все могут позволить себе удовольствие посещать спортивный клуб. Учитывая, что при этом рвение худеть и меняться к лучшему все-таки не пропадает, многие начинают искать способы заниматься тренировками в удобном для себя месте. И, конечно же, преобладающее большинство из них размышляют над проведением занятий в домашних условиях. Тренировки на кардио дома, без тренажеров, могут быть не менее действенными, нежели занятия, проводимые в спортклубе при помощи специального спортивного инвентаря. \r\nПольза кардио\r\nЕсли вы задались целью именно похудеть – избавиться от лишнего веса, – одним из наиболее действенных блоков в работе над своим телом для вас станет кардио. Дома, без тренажеров, тренировки данного направления дадут возможность справиться с поставленными задачами и дойти до желаемой цели так же эффективно, как и в тренажерном зале. Все зависит лишь от усердия худеющего, его нацеленности на результат, а также правильности выполнения конкретных упражнений и комплексного подхода к проблеме избавления от лишнего веса.\r\nСлово «кардио» пошло от греческой производной kardia: его значение предусматривает принадлежность к процессам в организме, которые связаны напрямую с работой сердца и физической активностью. Применение программы на кардио дома, в фитнес-зале или спортклубе является залогом формирования идеального тела и укрепления сердечно-сосудистой системы. Это подтверждают большинство проведенных медицинских исследований, которые говорят о значимости и порой даже необходимости осуществления подобного рода аэробных нагрузок на организм. Непосредственная польза выполнения тренировок с кардио в домашних условиях или в тренажерном зале при помощи специального оборудования включает в себя несколько основных наиболее значимых аспектов. \r\nУлучшается работа сердечно-сосудистой системы за счет того, что оказывается воздействие на сердечную мышцу – она тоже «тренируется», сокращается и растягивается. \r\nПовышается тонус мышц и сжигаются калории. \r\nРазвивается выносливость. Снижается уровень депрессивно-стагнационных процессов, а за счет выброса негативных эмоций повышается уровень эндорфина. \r\nУскоряются метаболические процессы. \r\nСнижается риск диабетических проявлений ввиду понижения чувствительности к скачкам уровня сахара в крови. \r\nВосстанавливается и улучшается работа дыхательной системы. \r\nУвеличивается плотность костной ткани.\r\n Помимо всего прочего, правильно выполненная структурированная работа над кардио улучшает самочувствие, повышает настроение, заряжает энергией и позитивом на целый день. Здесь главное все делать в меру, с соблюдением правил безопасности, чтобы тренировки с кардио дома, без тренажеров, не превратились в угрозу еще большую, чем опасность получить повреждения в спортзале. Ведь там присутствует гораздо более существенная вероятность травматизации при выполнении определенных упражнений. '),
(3, 'Почему низкая самооценка заставляет обесценивать других. Реальные причины, которые не всегда на поверхности', '2022-09-04', '1662320886.jpg', 'Люди, обладающие низкой самооценкой, часто недооценивают действия других людей. Такое поведение часто становится причиной серьезного стресса. У некоторых людей самооценка может быть всегда низкой или меняться под действием различных факторов. Основная опасность такого отношения к себе заключается в том, что человек не может двигаться вперед, не пользуется многочисленными возможностями, появляющимися в его жизни, а также стремится обесценивать других людей. Люди с низкой самооценкой часто испытывают страх и неуверенность, не доверяют миру, а также постоянно чувствуют тревогу и вину. Существует несколько причин, по которой они обесценивают окружающих.\r\n	<b>Стрессовое состояние</b>\r\nНизкая самооценка почти всегда сопровождается стрессами, которые появляются после общения с людьми дома, на работе или в другом месте. Такие люди не могут принять похвалу, сказать «нет» или отстоять свои личные границы. Поэтому у них появляется множество негативных эмоций, к которым относится не только страх, вина и разочарование, но и ненависть к окружающим. Такие отрицательные чувства выливаются в обесценивание других людей. \r\nЧеловек, испытывающий стресс, чувствует нарушение личного пространства и раздражение. Он не может объективно реагировать на чужие успехи и достижения. Он чувствует страх потери контроля и перемен. Такие люди опасаются, что их не поймут, забросят и покинут. Поэтому они перестают уважать даже самых близких людей. Нередко они становятся настолько враждебными и раздражительными, что с ними невозможно дальше общаться.\r\nЛюди с низкой самооценкой часто пользуются обесцениванием, чтобы снизить конкуренцию и напасть на нужного человека. Они постоянно говорят за спиной, что коллега ничего не делает, подлизывается к начальству и не может справиться с поставленными задачами. При этом они не замечают старания и усилия своего коллеги. Такие действия совершаются намеренно, а также призваны снизить конкуренцию на работе или дома. Поведение человека с заниженной самооценкой очень неприятно для окружающих. Они считаются сплетниками и завистниками, но нередко благодаря своей нечестной деятельности добиваются поставленных целей.\r\nОбесценивание часто используется людьми с низкой самооценкой для манипуляции окружающими. Они пользуются разными агрессивными фразами, к которым относится: «Не очень и хотелось», «Мне и даром не нужно», «Кто же так делает». Такими словами человек пытается не только защититься от собственных негативных чувств, но и управлять другими людьми. \r\nОбесценивание ранит любого человека, поэтому он начинает испытывать разочарование и неуверенность. В такой ситуации им довольно легко управлять, направив в нужное для себя русло. Поэтому такой способ эффективно используется людьми с плохой самооценкой. Таким методом они пытаются самоутвердиться и почувствовать собственную значимость.\r\n<b>Страх быть хуже другого человека</b> \r\nДанная причина обесценивания считается наиболее популярной. Люди с заниженной самооценкой очень боятся, что все осознают, что они хуже других. Поэтому они разными способами стараются обесценить достижения и подвиги своих родственников, друзей или коллег. Они выражают свое презрение и отвращение, а также иногда смеются над свершениями близких людей. Такое поведение приводит к потере связи и хороших отношений с друзьями и родственниками. Каждый человек желает, чтобы его достижения были оценены по достоинству. Токсичные люди с низкой самооценкой своими словами делают хуже себе, поскольку теряют связь с родными людьми.\r\n<b>Непонимание и неприятие себя</b>\r\nОбесценивание часто используются людьми, которые не считают себя уникальной личностью. Они не могут принять собственные недостатки во внешности, характере или поведении, а также не понимают своих чувств и эмоций. Поэтому они отказываются от сильных сторон, не верят в собственный успех, а также завидуют другим, которые могут отбросить волнение и разочарование для достижения поставленной цели.\r\nБоль нереализованности выплескивается в дикую зависть, заставляющую обесценивать любые победы других людей. С течением времени человек теряет почти все связи, поскольку общаться с такими токсичными личностями очень сложно.'),
(4, 'Что такое программирование?', '2022-09-04', '1662321408.jpg', 'Сегодня слово«Программирование» можно увидеть / услышать, как в какой-нибудь вирусной рекламе в социальной сети, так и в литературном или кинематографическом произведении. Однако что же такое, программирование и кто такие программисты? Не мудрствуя лукаво, можно поступить как матерый кодер и загуглить новое слово.\r\nСогласно многочисленным определениям, программирование — это процесс создания компьютерных программ. Расшифровать это определение можно следующим образом. Программирование есть ничто иное, как объяснение машине что, в каком виде и как нужно получить пользователю. То есть это своеобразное искусство перевода пожеланий человека на язык машины.\r\n<b>Суть программирования</b>\r\nОсновная идея заключается в том, чтобы составить алгоритм и перевести его на язык программирования. Гуру разработки часто рекомендуют начать разработку программы с ответа на вопрос: «Можно ли реализовать эту задачу программно?». К примеру, даже сегодня мы не можем заставить компьютер предсказать, что будет через несколько дней. И пусть этот пример не совсем корректен, потому как данная задача невыполнима в принципе. Однако, если сузить постановку задачи до предсказания поведения какой-нибудь валюты на бирже — подобная задача решается при помощи достаточного сложного алгоритма и большой базы экспериментальных данных.\r\n<b>Алгоритмы</b>\r\nПосле того, как было принято решение о возможности программной реализации поставленной задачи, необходимо построить алгоритм её решения. То есть максимально подробно описать последовательность шагов по решению задачи с учетом всех возможных ветвлений, циклов и ошибок. На самом деле, строить алгоритм можно и для простейших повседневных операций. Так, к примеру, можно описать алгоритм заваривания чая:\r\n<ul>\r\n<li>Открыть чайник.</li>\r\n<li>Если в чайнике нет воды — набрать воду из под крана.</li>\r\n<li>Поставить чайник на газовую плиту.</li>\r\n<li>Открыть газ.</li>\r\n<li>Зажечь огонь.</li>\r\n<li>Дождаться, пока закипит вода в чайнике.</li>\r\n<li>Насыпать в чашку заварку.</li>\r\n<li>Залить заварку горячей водой.</li>\r\n</ul>\r\nЭтот алгоритм не универсален, однако для человека, который засыпает заварку в кружку и имеет дома газовую, а не электрическую плиту, он действителен.\r\n<b>Языки программирования</b>\r\nФактически, язык программирования, это набор правил описания команд и заранее созданных функций. Каждый язык программирования ограничивает разработчика строго предопределенным набором ключевых слов и команд, которые могут быть использованы при разработке. Выделяют несколько уровней языков:\r\nнизкого уровня (ассемблер) — работают напрямую с процессорными командами\r\nвысокого уровня (C++, C#, Java и др.) — больше похожи на обычный язык\r\nВо время разработки программного продукта могут выделяться разные уровни абстракций. То есть по разному представляться объекты реального мира. В зависимости от этого языки программирования принято разбивать на следующие виды:\r\nПроцедурные — определяют решение задачи шаг за шагом, вся система разбивается на ряд связанных между собой процедур.\r\nОбъектно-ориентированные — программа разрабатывается как совокупность взаимосвязанных объектов, каждый из которых может порождать множество конкретных реализаций. С точки зрения декомпозиции объекта разработки может быть удобнее;\r\nДекларативные — представляют собой языки описания проблемы и ожидаемого результата.'),
(5, 'Платформа .NET и язык программирования C#', '2022-09-04', '1662321559.jpg', 'C# является одним из самых востребованных, многофункциональных и активно развивающихся языков программирования на данный момент. С его помощью можно разрабатывать практически любое программное обеспечение, начиная от простых win forms приложений, до крупных клиент-серверных веб-приложений или даже мобильные приложения и компьютерных игры.\r\nЯзык программирования C# является относительно свежим, но он уже успел заслужить доверие. Релиз первой версии состоялся в феврале 2002 года. Крайней версией языка на момент написания статьи является C# 7.2, которая вышла 16.08.2017.\r\nСинтаксис языка C# как следует из названия входит в семейство Си-подобных языков и похож на другие популярных языки из этой группы (C++, Java). Поэтому, если вы уже знакомы с одним из этих языков, вам будет значительно проще освоить языком программирования C#.\r\n\r\nТак как C# является объектно-ориентированным языком, то он поддерживает наследование, полиморфизм, инкапсуляцию, строгую типизацию переменных, перегрузку операторов и другое. Все эти понятия будут нами подробно рассмотрены в последующих статьях. Благодаря использованию парадигмы объектно-ориентированного проектирования с помощью языка программирования можно достаточно легко разрабатывать масштабные и при этом гибкие проекты. При всем этом регулярно выходят новые версии языка C#, добавляя новую функциональность для упрощения жизни разработчика, увеличения скорости разработки, повышения производительности и надежности приложения.\r\n\r\n<b>Платформа .NET</b>\r\n.NET Framework – это программная платформа от компании Microsoft позволяющая выполнять разработку на различных языках программирования, так как для всех языков используется единая общеязыковая среда исполнения Common Language Runtime (CLR). Таким образом, основными возможностями платформы .NET являются:\r\n\r\n· Кроссплатформенность – .NET Framework поддерживается большинством современных операционных систем Windows, а также есть возможность создавать приложения поддерживаемые Linux системами, и даже мобильные приложения.\r\n\r\n· Мультиязычность – так как исходный код, написанный на используемом языке программирования, транслируется в общеязыковой Common Intermediate Language (CIL) код, появляется возможность вести разработку на любом поддерживаемом языке программирования, и даже использовать различные языки программирования в одном решении. Наиболее популярными поддерживаемыми языками являются C#, VB.NET, C++, F#.\r\n\r\n· Обширная библиотека классов и технологий – существует огромное количество готовых к использованию библиотек для решения необходимых задач. Зачастую совсем не приходится реализовывать низкоуровневую логику работы приложения, достаточно воспользоваться готовым решением, удобно поставляемым через менеджер пакетов nuget. Кроме того, платформа .NET предусматривает легкую разработку практически любого типа необходимого программного обеспечения.\r\n\r\n<b>Управляемый и неуправляемый код. JIT-компиляция</b>\r\nУправляемый код (managed code) – это код управляемый общеязыковой средой CLR. Это означает, что что управляющая среда имеет возможность приостановить выполнение приложения и получить специфическую информацию о состоянии приложения в любой момент его исполнения. Исходный код используемого языка программирования транслируется в управляемый код CIL (его еще называют высокоуровневым ассемблером).\r\n\r\nПосле создания библиотеки классов или приложения, исходный код продолжает храниться на языке CIL. А при запуске приложения или обращении к библиотеке выполняется Just-In-Time (JIT) компиляция приложения в машинный код, специфичный именно для того окружения, на котором осуществляется исполнение приложения. При этом важной особенностью является то, что выполняется компиляция только той части приложения или библиотеки, к которой выполняется обращение (ну и связей естественно). Это позволяет увеличить производительность работы системы и экономить ресурсы.\r\n\r\nНеуправляемый код (unmanaged code) – это код, транслируемый сразу в машинный исполняемый код и исполняется операционной системой напрямую.'),
(6, 'Docker: основы работы', '2022-09-04', '1662321759.png', 'Докер – специальный термин в программировании, с которым должен быть знаком каждый разработчик. Впервые соответствующее понятие появилось 13 марта 2013 года.\r\n\r\nВ данной статье будет рассказано о том, что собой представляет докер, а также как им пользоваться. Это поможет намного лучше и быстрее разбираться в контейнерах, а также развертке контента. Docker-команды здесь играют немаловажную роль.\r\n\r\n<b>Определение</b>\r\nДокер – это программное обеспечение для автоматизации развертки, а также управления утилитами в средах, которые поддерживают контейнеры. Носит название контейнеризатора софта.\r\n\r\nПри помощи образов можно:\r\n\r\n«упаковать» имеющуюся программу со всеми его зависимостями и окружением в отдельный «блок»;\r\nразвернуть ПО в любой Linux-системе или другой ОС;\r\nобезопасить соответствующий софт от критических ситуаций за счет хранения в контейнере.\r\nОсновное предназначение – это проведение тестирования при разработке программного обеспечения.\r\n\r\n<b>Сущности</b>\r\nПеред изучением Docker команд стоит сначала разобраться с сущностями, с которыми работает соответствующая «технология». Всего их несколько:\r\n\r\nDocker Image. Это – образ. Представляет собой шаблон, по которому создаются контейнеры. Можно сравнить со слоеным пирогом: поверх «базы» накладывается файловая система. На выходе получается готовый неизменный образ. Он позволяет устанавливать утилиты, конфигурации и зависимости. Другие образы могут наследоваться в Docker Images.\r\nDockerFile. Файл, в котором описаны основные инструкции относительно сборки образов.\r\nDocker Container. Представляет собой контейнер. Runtime-сущность, которая опирается на образ. Приложение, развернутое через рассматриваемую «технологию». Здесь образ – это инсталлятор. У запущенных контейнеров аналогия – уже активированная программа.\r\nRegistry. Репозиторий, в котором будут храниться образы Докера. Может быть публичным или локальным. Репозитории создаются на платформах типа GitLab, в них размещают images с описаниями, а также тегами и разного рода версиями.\r\nВсе это необходимо помнить перед тем, как изучать основные Docker команды. Разобраться с соответствующим направлением на самом деле не так трудно, как может показаться. Даже новичок в программировании со временем сможет быстро освоить контейнеры и навыки работы с ними.\r\n\r\n<b>Составляющие и внутреннее устройство</b>\r\nВиртуализация здесь будет осуществляться через уровень операционной системы. Виртуальная среда запускается из ядра ОС, используя ресурсные возможности оной.\r\n\r\nУ Докера есть следующие компоненты:\r\n\r\nhost – операционная система, на которую устанавливается «технология»;\r\ndaemon – служба управления объектами Докера: хранилищами, сетями, контейнерами и образами;\r\nclient – консольный клиент, который дает возможность взаимодействовать с daemon, отправлять команды, создавать контейнеры и контактировать с ними;\r\nimage – неизменяемый образ, из которого будет разворачиваться заданный контейнер;\r\ncontainer – развернутое и запущенное ПО;\r\nregistry (Docker Hub) – репозиторий, который хранит образы;\r\ndockerfile – инструкция по сборке образа;\r\ncompose – инструмент для управления несколькими контейнерами;\r\ndesktop – GUI-клиент, который распространяется через GPL.\r\nТеперь можно изучать Docker команды, которые помогут грамотно управлять образами и контейнерами, а также проводить тестирование. Автоматизированное в том числе.'),
(7, 'Что такое PHP и почему его все ненавидят', '2022-09-04', '1662322140.jpeg', '<b>История языка</b>\r\nИзначально PHP расшифровывался как Personal Home Page Tools — инструменты для создания персональных страниц. Дело в том, что раньше, чтобы сделать функциональный сайт, чаще всего использовали C, Perl и CGI-скрипты. Звучит сложно, на деле — тоже сложно. Единственным способом сделать что-то своё и не изучать при этом три тома по программированию был PHP.\r\n\r\nЯзык HTML недостаточно гибкий и умеет не так много, как хотелось бы. Разработчики PHP решили расширить возможности гипертекста и сделали такой язык, который можно встраивать прямо в HTML-код, чтобы они работали вместе. Для этого используют операторы или <?PHP КАКОЙ-ТО КОД ?> или <? КАКОЙ-ТО КОД ?>.\r\n\r\nНапример, можно сделать так:\r\n\r\n<?PHP $text_part = \"этот код написан на PHP?\"; //Задаём строковую переменную и сразу наполняем её текстом ?>\r\n\r\n<div> <p> Привет! А вы знаете, что <?PHP echo $text_part; ?> </p> </div>\r\n\r\nВ результате на странице получится строчка: «Привет! А вы знаете, что этот код написан на PHP?»\r\n\r\nЕщё можно создавать целые PHP-файлы и писать весь код там, а потом просто подключать эти файлы в нужный момент. Получается, что с PHP можно работать в двух режимах: писать код прямо в коде страницы или выносить всё в отдельные файлы.\r\n\r\n<b>PHP — это просто</b>\r\nИменно простота этого языка принесла ему дурную славу: слишком много появилось плохого кода, который на первый взгляд работал хорошо. Посмотрите сами: начать писать на PHP действительно просто.\r\n\r\nКомментарии и точка с запятой. Комментарии можно ставить в любом месте — достаточно написать два слеша подряд. А точка с запятой ставится после каждой команды — точно так же, как в С, Pascal, JavaScript и ещё в сотнях других языков.\r\n\r\nОбъявление переменных. Чтобы объявить переменную, нужно просто поставить знак доллара, после него написать название переменной и присвоить ей какое-то значение.\r\n\r\n$x = 5;\r\n$y = $x+2;\r\n\r\nВывод на экран. В HTML-коде достаточно вставить команду echo, которая помещает текст в то место, откуда вызвали команду. Например, этот код покажет заголовок второго уровня с текстом «Заголовок, собранный на PHP»:\r\n\r\n<? $h1_text = \"Заголовок, собранный на PHP\"; ?>\r\n<h1> <? echo $h1_text; ?></h1>\r\n\r\nИ этот код сделает то же самое:\r\n\r\n<? echo \"<h1>\";\r\n$h1_text = \"Заголовок, собранный на PHP\";\r\necho $h1_text;\r\necho \"</h1>\"; ?>\r\n\r\nЕщё в PHP есть классы и объекты, автоматическое приведение типов (хотя мало кто понимает, как оно там работает в сложных примерах) и множество встроенных функций, которые упрощают разработку и помогают быстро писать код. А самое главное — PHP сам заставляет работать любой код, если он хоть как-то написан по правилам языка. Даже если внутри будет полная чушь, но похожая на PHP-код — интерпретатор его старательно выполнит, и, скорее всего, многое из этого будет даже работать.\r\n\r\n<b>Для чего нужен PHP</b>\r\nСобирать страницы из модулей. Если помните, PHP-код можно встраивать в HTML-страницы, а можно сохранять как отдельные файлы. В этом случае мы получаем мини-модули, каждый из которых отвечает за что-то одно. Например, в одном мы пишем, как будет выглядеть шапка сайта, в другом — меню, третий файл будет отвечать за подвал, четвёртый — за блок с отзывами о товарах.\r\n\r\nЕсли у нас интернет-магазин и на каждой странице товара нужно показать шапку сайта и подвал, можно каждый раз прописывать это вручную, а можно собрать на PHP. Для этого достаточно в теле страницы написать что-то такое:\r\n\r\n<div>\r\n\r\n<? include(\"/includes/header.php\"); ?>\r\n\r\nТут можно вставить ссылку на модуль карточки товара или заполнить раздел информацией вручную. Но лучше модулем, как выше и ниже.\r\n\r\n<? include(\"/includes/footer.php\"); ?>\r\n\r\n</div>\r\n\r\nPHP возьмёт файл header.php, в котором мы написали, как должна выглядеть шапка сайта, и поставит её в начало страницы. То же самое сделает и с подвалом — файлом footer.php, и так будет на каждой странице товара. Получается, что нам не нужно писать один и тот же код шапки и подвала на каждой странице, достаточно сделать это в одном месте, а потом подключать одной строчкой.\r\n\r\nСоздавать CMS и движки для сайтов. Такие модульные возможности PHP привели к тому, что большинство современных систем управления контентом на сайтах написаны на PHP. Смотрите сами:\r\n\r\nWordPress;\r\nDrupal;\r\nJoomla;\r\nMediaWiki — для создания вики-сайтов;\r\nOpenCart — инструмент для интернет-магазинов;\r\nphpMyAdmin — работа с базами данных.\r\nЕсли вы на бесплатном хостинге используете какой-то инструмент для создания или поддержки сайта, скорее всего, он тоже будет написан на PHP.\r\n\r\nРаботать с формами и данными на странице. HTML плохо умеет работать с формами и отправлять куда-то данные, которые вы вводите в поля регистрации. PHP справляется с этим гораздо лучше: вы говорите, из какого поля что нужно взять и по какому адресу отправить, а всё остальное интерпретатор делает за вас.\r\n\r\nЗапоминать пользователей и делать формы авторизации. Если вам нужно быстро написать свою форму регистрации на сайте или запоминать посетителей даже без регистрации, то PHP — самый простой вариант решения этой задачи. Единственное, что нужно знать — как работать с базами данных, где хранятся записи о пользователях, потому что PHP это тоже умеет.\r\n\r\n<b>Почему все ненавидят PHP</b>\r\nПо старой памяти, когда ужасного кода было много. Простота вхождения в этот язык привела к тому, что невозможно было нормально поддерживать сайт, написанный кем-то на PHP. Этот язык позволял раньше (сейчас меньше, но тоже есть) много вольностей с типами данных, переменными, обращениями к базе данных, поэтому разобраться было почти нереально.\r\n\r\nКроме этого, раньше в PHP было много уязвимостей, через которые можно залезть в базы данных пользователей или что-то поломать на сайте. В новых версиях большинство дыр уже устранили, но тогда это стало реальной проблемой.\r\n\r\nСмешанный код. Писать в одном файле на PHP и HTML можно, если у вас всего одна форма обратной связи. Но когда весь сложный код на PHP расползается по всей странице, то это сильно мешает разобраться, что же там происходит на самом деле.\r\n\r\nЛюбые переменные в любом месте. Понадобилась новая переменная? Объявите её на любом участке кода и сразу берите в работу. Это удобно для первоначальной разработки, когда ты просто берёшь новую переменную там, где она понадобилась, и делаешь с ней что хочешь. Но когда проходит время или кто-то другой хочет разобраться в коде, то такой подход сильно затрудняет работу.\r\n\r\nНапример, можно написать так:\r\n\r\n$a = 5+3;\r\n$b = \"Строка\";\r\n… много строк кода …\r\n$a = 17 + $b;\r\n$b = 21;\r\n\r\nКогда новый программист захочет понять, за что отвечают переменные а и b, он найдёт место, где они объявляются, и посмотрит, какого они типа и для чего использовались вначале. Но разработчик мог в процессе передумать и начать использовать эти переменные для других целей с новыми типами данных. Чтобы это понять, нужно просмотреть весь код и разобраться в логике, а это долго и трудно.\r\n\r\nА ещё:\r\n\r\nнет нормальной многопоточности;\r\nмало фреймворков;\r\nстранная работа с объектами и классами;\r\nнет контроля и отладки ошибок.\r\nСтоит ли учить PHP?\r\nЗависит от задачи. Дело в том, что не менее 80% сайтов уже сейчас работают на PHP: это значит, что их нужно будет еще какое-то время поддерживать. Ещё лет 5–10 спрос на PHP точно будет.\r\n\r\nОднозначно стоит учить PHP, если хотите работать с Вордпрессом, Друпалом, Джумлой и другими известными системами управления сайтами. Они написаны на PHP, и все надстройки и дополнения — тоже. Хороший разработчик WordPress сейчас на вес золота.\r\n\r\nБудут ли веб-разработчики массово переходить на другие технологии — вопрос открытый. Сейчас, если вы покупаете виртуальный хостинг, вам сразу включают интерпретатор PHP, потому что все его используют. А другие технологии типа Python или Node.js — не включают, их нужно устанавливать отдельно.\r\n\r\nНо ведь и веб — это не навсегда. Ещё лет 20, и понятие веб-сайта может безнадёжно устареть, потому что люди будут в приложениях, соцсетях или ещё где похуже.\r\n\r\nНаверное, ответ на вопрос такой: если вам до 20 лет, то уже не надо учить PHP. А если ближе к 40–50 и вы хотите заниматься вебом — то определённо да.'),
(8, 'Почему Laravel — один из лучших фреймворков для бизнеса?', '2022-09-05', '1662401089.jpg', 'Большие предприятия и стартапы часто разрабатывают продукты с нуля. В начале пути огромную роль играет выбор фреймворка. Ошибка на этом этапе стоит дорого — из-за неподходящего фреймворка можно получить провальный или посредственный продукт.\r\n\r\nОдин из первых вопросов для бизнеса — язык программирования, на котором должен быть написан фреймворк. PHP здесь выглядит фаворитом по двум причинам. Вот первая — на рынке много PHP-программистов. Вот вторая — есть несколько хороших фреймворков, написанных на этом языке.\r\n\r\nСледующий вопрос после выбора языка — какой фреймворк выбрать предприятию. Если стартапы могут позволить себе эксперименты, то зрелые компании обычно нуждаются в надёжности и стабильности. Энтерпрайз не может рисковать и использовать экспериментальные технологии. Если разработчики нового фреймворка перестанут его поддерживать, бизнес останется у разбитого корыта.\r\n\r\nLaravel — популярный PHP-фреймворк с открытым исходным кодом. Это отличный выбор для бизнеса, так как:\r\n\r\nна рынке много PHP-разработчиков, найти специалиста для работы с Laravel относительно просто;\r\nвокруг Laravel сформировалась зрелая инфраструктура, поэтому есть много готовых инструментов для решения разных задач;\r\nприложения на Laravel легко масштабировать;\r\nприложения на Laravel эффективно работают в условиях высокой посещаемости;\r\nLaravel обеспечивает безопасность проектов. Например, код защищён от SQL-инъекций и CSRF-запросов.\r\n\r\nПодробнее об этом можно почитать в нашем блоге.\r\n\r\nА какой фреймворк считаете лучшим для бизнеса вы? Пишите в комментариях.');

-- --------------------------------------------------------

--
-- Структура таблицы `article_tag`
--

CREATE TABLE `article_tag` (
  `article_id` int(11) NOT NULL,
  `tag_id` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `article_tag`
--

INSERT INTO `article_tag` (`article_id`, `tag_id`) VALUES
(2, 6),
(3, 13),
(4, 1),
(5, 1),
(6, 1),
(7, 1),
(8, 1);

-- --------------------------------------------------------

--
-- Структура таблицы `comments`
--

CREATE TABLE `comments` (
  `article_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `comm_date` date NOT NULL,
  `comm_text` text NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- Структура таблицы `tags`
--

CREATE TABLE `tags` (
  `id` int(11) NOT NULL,
  `name` varchar(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `tags`
--

INSERT INTO `tags` (`id`, `name`) VALUES
(1, 'Программирование'),
(2, 'Лайфхаки'),
(3, 'Автомобили'),
(4, 'Бизнес'),
(5, 'Здоровое питание'),
(6, 'Спорт'),
(7, 'Кулинария'),
(8, 'Компьютеры'),
(9, 'Новости'),
(10, 'Мода'),
(11, 'Путешествия'),
(12, 'Фильмы'),
(13, 'Психология');

-- --------------------------------------------------------

--
-- Структура таблицы `users`
--

CREATE TABLE `users` (
  `id` int(11) NOT NULL,
  `login` varchar(255) NOT NULL,
  `password` varchar(255) NOT NULL,
  `type` varchar(5) NOT NULL DEFAULT 'user'
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `users`
--

INSERT INTO `users` (`id`, `login`, `password`, `type`) VALUES
(11, 'admin', '$2y$10$CMxmsQx2ir4MfNVB4HBMqu5LmaJuzfOzyeL.8rAE4QF32dPqFcp3m', 'admin');

--
-- Индексы сохранённых таблиц
--

--
-- Индексы таблицы `articles`
--
ALTER TABLE `articles`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `article_tag`
--
ALTER TABLE `article_tag`
  ADD KEY `article_id` (`article_id`),
  ADD KEY `tag_id` (`tag_id`);

--
-- Индексы таблицы `comments`
--
ALTER TABLE `comments`
  ADD KEY `article_id` (`article_id`),
  ADD KEY `user_id` (`user_id`);

--
-- Индексы таблицы `tags`
--
ALTER TABLE `tags`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `users`
--
ALTER TABLE `users`
  ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT для сохранённых таблиц
--

--
-- AUTO_INCREMENT для таблицы `articles`
--
ALTER TABLE `articles`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=9;

--
-- AUTO_INCREMENT для таблицы `tags`
--
ALTER TABLE `tags`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=14;

--
-- AUTO_INCREMENT для таблицы `users`
--
ALTER TABLE `users`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=16;

--
-- Ограничения внешнего ключа сохраненных таблиц
--

--
-- Ограничения внешнего ключа таблицы `article_tag`
--
ALTER TABLE `article_tag`
  ADD CONSTRAINT `article_tag_ibfk_1` FOREIGN KEY (`article_id`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
  ADD CONSTRAINT `article_tag_ibfk_2` FOREIGN KEY (`tag_id`) REFERENCES `tags` (`id`) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Ограничения внешнего ключа таблицы `comments`
--
ALTER TABLE `comments`
  ADD CONSTRAINT `comments_ibfk_1` FOREIGN KEY (`article_id`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
  ADD CONSTRAINT `comments_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
